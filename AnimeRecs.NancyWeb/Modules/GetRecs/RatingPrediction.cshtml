@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<AnimeRecs.NancyWeb.Modules.GetRecs.GetRecsViewModel>
@using AnimeRecs.NancyWeb;
@using AnimeRecs.RecService.ClientLib;
@using AnimeRecs.RecEngine;
@using MalApi;
@using System.Collections.Generic;
@using System.Linq;

@{
    HashSet<int> animeIdsShown = new HashSet<int>(Model.Results.Results.Select(rec => rec.ItemId));
    animeIdsShown.UnionWith(Model.AnimeWithheld.Keys);
    Model.DeclareAnimeToBeDisplayed(animeIdsShown);
}

@if (Model.AnimeWithheld.Count > 0)
{
    Dictionary<int, MyAnimeListEntry> animeInUsersList = new Dictionary<int, MyAnimeListEntry>();
    foreach (MyAnimeListEntry entry in Model.UserLookup.AnimeList)
    {
        animeInUsersList[entry.AnimeInfo.AnimeId] = entry;
    }

    List<int> animeWithheld = Model.AnimeWithheld.Keys
        .OrderByDescending(animeId => Model.AnimeWithheld[animeId].Rating ?? 0)
        .ThenBy(animeId => animeInUsersList[animeId].AnimeInfo.Title)
        .ToList();

    Dictionary<int, int> rankInRecListByAnimeId = new Dictionary<int, int>();
    Dictionary<int, double> predictedRatingByAnimeId = new Dictionary<int, double>();
    int rank = 1;
    foreach (RatingPredictionRecommendation rec in Model.Results.Results.Cast<RatingPredictionRecommendation>())
    {
        rankInRecListByAnimeId[rec.ItemId] = rank;
        rank++;
        predictedRatingByAnimeId[rec.ItemId] = rec.PredictedRating;
    }


    <table class="recsTable">
        <thead>
            <tr>
                <td>
                    Streams
                </td>
                <td>
                    Anime withheld
                </td>
                <td>
                    Type
                </td>
                <td>
                    Status
                </td>
                <td>
                    Actual rating
                </td>
                <td>
                    Predicted rating
                </td>
                <td>
                    Rank in recommendations
                </td>
            </tr>
        </thead>
        <tbody>
            @foreach (int animeId in animeWithheld)
            {
                <tr>
                    <td>
                        @HtmlHelpers.GetStreamLinksHtml(animeId, Model, RenderContext)
                    </td>
                    <td>
                        @HtmlHelpers.GetWithheldMalAnimeHtml(animeId, animeInUsersList[animeId].AnimeInfo.Title)
                    </td>
                    <td>
                        @HtmlHelpers.MalAnimeTypeAsString(animeInUsersList[animeId].AnimeInfo.Type)
                    </td>
                    <td>
                        @HtmlHelpers.MalAnimeStatusAsString(animeInUsersList[animeId].Status)
                    </td>
                    <td>
                        @HtmlHelpers.GetMalRatingString(animeInUsersList[animeId].Score)
                    </td>
                    <td>
                        @if (predictedRatingByAnimeId.ContainsKey(animeId))
                        {
                            <text>@predictedRatingByAnimeId[animeId].ToString("F3")</text>
                        }
                        else
                        {
                            <text>-</text>
                        }
                    </td>
                    <td>
                        @if (rankInRecListByAnimeId.ContainsKey(animeId))
                        {
                            <text>@rankInRecListByAnimeId[animeId]</text>
                        }
                        else
                        {
                            <text>-</text>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<table class="recsTable">
    <thead>
        <tr>
            <td>
                Streams
            </td>
            <td>
                Anime
            </td>
            <td>
                Type
            </td>
            <td>
                Predicted Rating
            </td>
        </tr>
    </thead>
    <tbody>
        @foreach (RatingPredictionRecommendation rec in Model.Results.Results.Cast<RatingPredictionRecommendation>().Take(Model.MaximumRecommendationsToReturn))
        {
            <tr>
                <td>
                    @HtmlHelpers.GetStreamLinksHtml(rec.ItemId, Model, RenderContext)
                </td>
                <td>
                    @HtmlHelpers.GetRecommendedMalAnimeHtml(rec.ItemId, Model)
                </td>
                <td>
                    @HtmlHelpers.MalAnimeTypeAsString(Model.Results.AnimeInfo[rec.ItemId].Type)
                </td>
                <td>
                    @rec.PredictedRating.ToString("F3")
                </td>
            </tr>
        }
    </tbody>
</table>

@*
    Copyright (C) 2014 Greg Najda

    This file is part of AnimeRecs.NancyWeb.

    AnimeRecs.NancyWeb is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    AnimeRecs.NancyWeb is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with AnimeRecs.NancyWeb.  If not, see <http://www.gnu.org/licenses/>.
*@